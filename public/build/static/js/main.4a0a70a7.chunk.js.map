{"version":3,"sources":["service.ts","constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getEvents","round","a","fetch","response","json","getEventTeamResult","event","eventId","rounds","key","text","value","defaultRound","length","App","useState","events","setEvents","eventList","setEventList","isLoading","setIsLoading","setEvent","eventTeamResult","setEventTeamResult","setRound","isDropdownSearchable","useWindowHeight","useEffect","list","map","name","undefined","Container","style","padding","Dimmer","active","Loader","Header","size","Divider","Dropdown","placeholder","fluid","search","selection","options","onChange","e","marginTop","find","Table","unstackable","Row","HeaderCell","textAlign","Body","team","pos","zlteam","Cell","individualpoints","primespoints","points","teampoints","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a0a70a7.chunk.js","sourcesContent":["import { ZwiftEvent } from \"../../types\";\n\nconst isDev = process.env.NODE_ENV === \"development\";\nconst prefix = isDev ? \"http://localhost:5000\" : \"\";\n\nexport async function getEvents(round: number) {\n  const response = await fetch(`${prefix}/events?round=${round}`);\n  return await response.json();\n}\n\nexport async function getEventTeamResult(event: ZwiftEvent) {\n  const response = await fetch(\n    `${prefix}/teamresults/json?eventId=${event.eventId}&category=B`\n  );\n  return await response.json();\n}\n","import { DropdownItemProps } from \"semantic-ui-react\";\n\nexport const rounds: DropdownItemProps[] = [\n  {\n    key: 1,\n    text: \"Qualifying Round 1 - October 12-13\",\n    value: 1,\n  },\n  {\n    key: 2,\n    text: \"Qualifying Round 2 - October 19-20\",\n    value: 2,\n  },\n  {\n    key: 3,\n    text: \"Season 1 Round 1 - October 26-27\",\n    value: 3,\n  },\n];\n","import React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport {\n  Container,\n  Dimmer,\n  Divider,\n  Dropdown,\n  DropdownItemProps,\n  DropdownProps,\n  Header,\n  Loader,\n  Table,\n} from \"semantic-ui-react\";\nimport { Team, ZwiftEvent } from \"../../types\";\nimport { getEvents, getEventTeamResult } from \"./service\";\nimport { useWindowHeight } from \"@react-hook/window-size\";\nimport { rounds } from \"./constants\";\n\nconst defaultRound = rounds[rounds.length - 1].value as number;\n\nfunction App() {\n  const [events, setEvents] = useState<ZwiftEvent[]>([]);\n  const [eventList, setEventList] = useState<DropdownItemProps[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [event, setEvent] = useState<ZwiftEvent>();\n  const [eventTeamResult, setEventTeamResult] = useState<Team[]>();\n  const [round, setRound] = useState<number>(defaultRound);\n\n  const windowHeight = useWindowHeight();\n  const isDropdownSearchable = windowHeight > 700;\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n\n      const json = await getEvents(round);\n      setEvents(json);\n\n      const list = json.map((event: ZwiftEvent) => ({\n        key: event.eventId,\n        text: event.name,\n        value: event.eventId,\n      }));\n      setEventList(list);\n\n      setEvent(undefined);\n\n      setIsLoading(false);\n    })();\n  }, [round]);\n\n  useEffect(() => {\n    (async () => {\n      if (!event) {\n        setEventTeamResult(undefined);\n        return;\n      }\n\n      setIsLoading(true);\n      const json = await getEventTeamResult(event);\n      setEventTeamResult(json);\n      setIsLoading(false);\n    })();\n  }, [event]);\n\n  const handleEventChange = (e: SyntheticEvent, { value }: DropdownProps) => {\n    setEvent(events.find((event) => event.eventId === value));\n  };\n\n  const handleRoundChange = (e: SyntheticEvent, { value }: DropdownProps) => {\n    setRound(value as number);\n  };\n\n  return (\n    <Container style={{ padding: \"1rem 0\" }}>\n      <Dimmer active={isLoading}>\n        <Loader />\n      </Dimmer>\n\n      <Header size=\"huge\">Zwift League Results - Category B</Header>\n      <Divider />\n\n      <Dropdown\n        placeholder=\"Select round\"\n        fluid\n        search={isDropdownSearchable}\n        selection\n        options={rounds}\n        onChange={handleRoundChange}\n        value={round}\n      />\n\n      <Dropdown\n        style={{ marginTop: \"1rem\" }}\n        placeholder=\"Select an event\"\n        fluid\n        search={isDropdownSearchable}\n        selection\n        options={eventList}\n        onChange={handleEventChange}\n        value={event?.eventId}\n      />\n      <Divider />\n\n      {eventTeamResult && (\n        <Table unstackable>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>#</Table.HeaderCell>\n              <Table.HeaderCell>Team</Table.HeaderCell>\n              <Table.HeaderCell textAlign=\"right\">Points</Table.HeaderCell>\n              <Table.HeaderCell textAlign=\"right\">Primes</Table.HeaderCell>\n              <Table.HeaderCell textAlign=\"right\">Total</Table.HeaderCell>\n              <Table.HeaderCell textAlign=\"right\">Team</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {eventTeamResult.map((team, pos) => (\n              <Table.Row key={team.zlteam}>\n                <Table.Cell>{pos + 1}.</Table.Cell>\n                <Table.Cell>{team.zlteam}</Table.Cell>\n                <Table.Cell textAlign=\"right\">\n                  {team.individualpoints}\n                </Table.Cell>\n                <Table.Cell textAlign=\"right\">{team.primespoints}</Table.Cell>\n                <Table.Cell textAlign=\"right\">{team.points}</Table.Cell>\n                <Table.Cell textAlign=\"right\">{team.teampoints}</Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}